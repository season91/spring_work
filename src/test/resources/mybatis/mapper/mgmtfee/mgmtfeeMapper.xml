<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
    <mapper namespace="com.kh.toy.mgmtfee.model.repository.MgmtfeeRepository">

	<insert id="insertMgmtfee">
		insert into tb_mgmtfee (MGMTFEE_IDX, APARTMENT_IDX, GENERATION_IDX, GNRL_MGMT_FEE, CLEAN_FEE, ELVTR_MNFEE, GEN_ELCTR, COMON_ELCTR, GEN_WATER,
		SEWER, EXPENSES, GEN_REDUCTION, PERIOD_PAYMENT, DUE_DATE, MGMT_START_DATE, MGMT_END_DATE, MGMT_WRITE_DATE) 
		values (sc_mgmtfee_idx.nextval, #{apartmentIdx}, #{generationIdx}, #{gnrlMgmtFee},
		#{cleanFee}, #{elvtrMnfee}, #{genElctr}, #{comonElctr}, #{genWater}, #{sewer}, #{expenses}, #{genReduction}, #{periodPayment},
		#{dueDate}, #{mgmtStartDate}, #{mgmtEndDate}, #{mgmtWriteDate})
	</insert>
	
	<select id="selectMgmtfeeList" resultType="mgmtfee">
	select m.*, g.id as generation_info 
	from tb_mgmtfee m JOIN tb_generation g on (m.generation_idx = g.generation_idx) 
	where m.apartment_idx = #{apartmentIdx}
	</select>
	
	<update id="updateMgmtfee">
		update tb_mgmtfee 
		set GNRL_MGMT_FEE=#{gnrlMgmtFee}, CLEAN_FEE = #{cleanFee}, ELVTR_MNFEE = #{elvtrMnfee}, GEN_ELCTR = #{genElctr}, 
		COMON_ELCTR = #{comonElctr}, GEN_WATER =  #{genWater}, SEWER = #{sewer}, EXPENSES = #{expenses}, GEN_REDUCTION = #{genReduction},
		is_payment = #{isPayment}
		where MGMTFEE_IDX = #{mgmtfeeIdx}
	</update>
	
	<update id="procudureUpdatePeriodPayment" statementType="CALLABLE">
		{call pl_mgmtfee_update(#{mgmtfeeIdx, mode=IN})}
	</update>
	
	<insert id="procedureMgmtOverDue" statementType="CALLABLE">
		{call pl_overdue_return(#{mgmtfeeIdx, mode=IN})}
	
	</insert>
	
	<select id="selectMgmtfeeListTest" resultType="mgmtfee">
		select * from (
			select rownum rnum, b.* from (
				select * from tb_mgmtfee m JOIN tb_generation g on (m.generation_idx = g.generation_idx) 
				<where>
					<choose>
						<when test="searchType == 'apartmentIdx'">
							m.apartment_idx = #{apartmentIdx} and m.is_del = 0 
						</when>
						<when test="searchType == 'mgmtfeeIdx'">
							m.mgmtfee_idx = #{mgmtfeeIdx} 
						</when>
						<when test="searchType == 'generationIdx'">
							m.generation_idx = #{generationIdx} 
						</when>
						<when test="searchType == 'isPayment'">
							m.apartment_idx = #{apartmentIdx} and m.is_payment = 1 
						</when>
						<when test="searchType == 'dueDate'">
							m.due_date = #{dueDate}
						</when>
					</choose>
				</where>
				order by mgmtfee_idx desc ) b 
			) where rnum between #{paging.queryStart} and #{paging.queryEnd}
	</select>
	
	<select id="selectContentCntTest" resultType="int">
		select count(*) from tb_mgmtfee 
		<where>
			<choose>
				<when test="searchType == 'apartmentIdx'">
					apartment_idx = #{apartmentIdx} and is_del = 0
				</when>
				<when test="searchType == 'mgmtfeeIdx'">
					apartment_idx = #{apartmentIdx} and mgmtfee_idx = #{mgmtfeeIdx}
				</when>
				<when test="searchType == 'generationIdx'">
					apartment_idx = #{apartmentIdx} and generation_idx = #{generationIdx}
				</when>
				<when test="searchType == 'isPayment'">
					apartment_idx = #{apartmentIdx} and is_payment = 1 
				</when>
				<when test="searchType == 'dueDate'">
					apartment_idx = #{apartmentIdx} and due_date = #{dueDate}
				</when>
			</choose>
		</where>
	</select>
	
	
</mapper>
